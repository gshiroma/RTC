runconfig:
    name: str()

    groups:
        pge_name_group:
            pge_name: enum('RTC_S1_PGE')

        input_file_group:
            # Required. List of SAFE files (min=1)
            safe_file_path: list(str(), min=1)
            # Required. List of orbit (EOF) files
            orbit_file_path: list(str(), min=1)
            # Optional. Burst ID to process (empty for all bursts)
            burst_id: list(str(), min=1, required=False)

        dynamic_ancillary_file_group:
            # Digital Elevation Model.
            dem_file: str(required=False)

            # Digital elevation model description
            dem_description: str(required=False)

        static_ancillary_file_group:

            # burst database sqlite file
            burst_database_file: str(required=False)

        primary_executable:
            product_type: enum('RTC_S1')

        product_group:

            processing_type: enum('NOMINAL', 'URGENT', 'CUSTOM', 'UNDEFINED', required=False)

            product_version: num(required=False)

            # Directory where PGE will place results
            product_path: str()
            # Directory where SAS can write temporary data
            scratch_path: str()

            # If option `save_bursts` is set, output bursts are saved to:
            #     {output_dir}/{burst_id}/{product_id}_v{product_version}{suffix}.{ext}
            # If option `save_mosaics` is set, output mosaics are saved to:
            #     {output_dir}/{product_id}_v{product_version}{suffix}.{ext}
            # If the field `product_id`` is left empty, the prefix "rtc_product"
            # will be used instead.
            # `suffix` is only used when there are multiple output files.
            # `ext` is determined by geocoding_options.output_imagery_format.
            output_dir: str()
            product_id: str()

            # RTC-S1 imagery
            save_bursts: bool(required=False)
            save_mosaics: bool(required=False)
            output_imagery_format: enum('HDF5', 'NETCDF', 'ENVI', 'GTiff', 'COG', required=False)
            output_imagery_compression: str(required=False)
            output_imagery_nbits: int(min=1, required=False)

            # Optional. Save secondary layers (e.g., inc. angle) within 
            # the HDF5 file
            save_secondary_layers_as_hdf5: bool(required=False)

            # Save RTC-S1 metadata in the HDF5 format
            # Optional for `output_imagery_format` equal to 'ENVI', 'GTiff', or
            # 'COG', and enabled by default for `output_imagery_format` equal
            # to 'HDF5' or 'NETCDF' or `save_secondary_layers_as_hdf5` is True
            save_metadata: bool(required=False)

        # This section includes parameters to tweak the workflow
        processing: include('processing_options', required=False)


---
geo2rdr_options:
   # Convergence threshold for rdr2geo algorithm
   threshold: num(min=0, required=False)
   # Maximum number of iterations
   numiter: int(min=1, required=False)

rdr2geo_options:
   # Convergence threshold for rdr2geo algorithm
   threshold: num(min=0, required=False)
   # Maximum number of iterations
   numiter: int(min=1, required=False)

# Group of processing options
processing_options:

   # Multilook in amplitude rather than intensity
   multilook_in_amplitude: bool(required=False)

   # Check if ancillary inputs cover entirely the output product
   check_ancillary_inputs_coverage: bool(required=False)

   # Polarization channels to process. 3 modes below correspond to VV, VH, VV+VH
   polarization: enum('co-pol', 'cross-pol', 'dual-pol', required=False)

   # Options to run geo2rdr
   geo2rdr: include('geo2rdr_options', required=False)

   # Options to run rdr2geo (for running topo when calculating layover shadow mask)
   rdr2geo: include('rdr2geo_options', required=False)

   # Range split-spectrum options
   range_split_spectrum: include('range_split_spectrum_options', required=False)

   # DEM interpolation method
   dem_interpolation_method: enum('sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

   # Apply absolute radiometric correction
   apply_absolute_radiometric_correction: bool(required=False)

   # Apply thermal noise correction
   apply_thermal_noise_correction: bool(required=False)

   # Apply RTC
   apply_rtc: bool(required=False)

   # Apply bistatic delay correction
   apply_bistatic_delay_correction: bool(required=False)

   # Apply dry tropospheric delay correction
   apply_dry_tropospheric_delay_correction: bool(required=False)

   # Radiometric Terrain Correction (RTC)
   rtc: include('rtc_options', required=False)

   # Geocoding options
   geocoding: include('geocoding_options', required=False)


rtc_options:
    # RTC output type: empty value to turn off the RTC
    # The output_type defaults to "gamma0" if the key is absent
    output_type: enum('gamma0', 'sigma0', required=False)

    algorithm_type: enum('area_projection', 'bilinear_distribution', required=False)

    input_terrain_radiometry: enum('beta0', 'sigma0', required=False)

    # Minimum RTC area factor in dB
    rtc_min_value_db: num(required=False)

    # RTC DEM upsampling
    dem_upsampling: int(min=1, required=False)


geocoding_options:

    # OPTIONAL - Apply RSLC metadata valid-samples sub-swath masking
    apply_valid_samples_sub_swath_masking: bool(required=False)

    # OPTIONAL - Apply shadow masking
    apply_shadow_masking: bool(required=False)

    # Algorithm type, area projection or interpolation: sinc, bilinear, bicubic, nearest, and biquintic
    algorithm_type: enum('area_projection', 'sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

    # Memory mode
    memory_mode: enum('auto', 'single_block', 'geogrid', 'geogrid_and_radargrid', required=False)

    # Processing upsampling factor on top of the input geogrid
    geogrid_upsampling: int(required=False)

    # Save the incidence angle
    save_incidence_angle: bool(required=False)

    # Save the local-incidence angle
    save_local_inc_angle: bool(required=False)

    # Save the projection angle
    save_projection_angle: bool(required=False)

    # Save the RTC area normalization factor (ANF) computed with
    # the projection angle method
    save_rtc_anf_psi: bool(required=False)

    # Save the range slope angle
    save_range_slope: bool(required=False)

    # Save the number of looks used to generate the RTC product
    save_nlooks: bool(required=False)

    # Save the RTC area normalization factor (ANF) used to generate
    # the RTC product
    save_rtc_anf: bool(required=False)

    # Save the interpolated DEM used to generate the RTC product
    save_dem: bool(required=False)

    # Save layover shadow mask
    save_layover_shadow_mask: bool(required=False)

    # OPTIONAL - Absolute radiometric correction
    abs_rad_cal: num(required=False)

    # Clip values above threshold
    clip_max: num(required=False)

    # Clip values below threshold
    clip_min: num(required=False)

    # Double SLC sampling in the range direction
    upsample_radargrid: bool(required=False)

    # Product EPSG code. Same as DEM if not provided
    output_epsg: int(min=1024, max=32767, required=False)

    # Product posting along X (same units as output_epsg)
    x_posting: num(min=0, required=False)

    # Product posting along Y (same units as output_epsg)
    y_posting: num(min=0, required=False)

    # Controls the product grid along X (same units as output_epsg)
    x_snap: num(min=0, required=False)

    # Controls the product grid along Y (same units as output_epsg)
    y_snap: num(min=0, required=False)

    # Top-left coordinates (same units as output_epsg)
    top_left:
      x: num(required=False)
      y: num(required=False)

    # Bottom-right coordinates (same units as output_epsg)
    bottom_right:
      x: num(required=False)
      y: num(required=False)

